import Head from 'next/head';
import useSpotifyToken from '../../hooks/use-spotify-token';
import {useQuery, gql} from '@apollo/client';
import client from '../../graphql/apollo-client';
import {NexusGenFieldTypes} from '../../graphql/nexus';
import {GetStaticProps} from 'next';
import {ParsedUrlQuery} from 'querystring';
import {Station as StationType} from '@prisma/client';
import SearchBox from '../../components/search-box';
import SpotifyWebPlayer from 'react-spotify-web-playback';
import {useState, useEffect} from 'react';

type Query = NexusGenFieldTypes['Query'];

const GET_STATION_LIST = gql`
  query Query {
    stations {
      id
      name
      meta {
        name
      }
    }
  }
`;

const GET_PLAY_LIST = gql`
  query StationPlaylist($stationId: ID!, $from: String!) {
    stations(id: $stationId) {
      id
      meta {
        name
      }
    }
    tracks(from: $from, stationId: $stationId) {
      id
      name
      lengthInSeconds
      spotifyURI
      playAt
      endAt
    }
  }
`;

export default function Station({station}: {station: StationType}) {
  const {spotifyToken} = useSpotifyToken();
  const now = new Date('2021-07-23T00:00:00Z');
  const {loading, error, data} = useQuery<Query>(GET_PLAY_LIST, {
    variables: {
      stationId: station.id,
      from: now.toISOString(),
    },
    pollInterval: 2000,
  });

  console.log(data, error);
  // const now = new Date('2021-07-23T00:00:00Z');
  const [currentTrack, setCurrentTrack] = useState<any>({});

  return (
    <div>
      <Head>
        <title>Station - {station.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      Station - {station.name}
      {/* <SpotifyWebPlayer
          token={spotifyToken}
          uris={currentTrack ? [currentTrack.spotifyURI] : []}
          initialVolume={0.5}
          autoPlay
        /> */}
      <SearchBox spotifyToken={spotifyToken} stationId={station.id} />
    </div>
  );
}

interface IParams extends ParsedUrlQuery {
  id: string;
}

export const getStaticProps: GetStaticProps = async (context) => {
  const {id} = context.params as IParams;
  const {error, data} = await client.query<Query>({
    query: GET_STATION_LIST,
    variables: {id},
  });
  return {
    props: {
      station: data.stations[0],
    },
  };
};

export async function getStaticPaths() {
  const {error, data} = await client.query<Query>({query: GET_STATION_LIST});
  const paths = data
    ? data.stations.map(({id}) => ({params: {id: id + ''}}))
    : [];
  return {
    paths,
    fallback: false,
  };
}
