import Head from 'next/head';
import {gql} from '@apollo/client';
import client from '../../graphql/apollo-client';
import {NexusGenFieldTypes} from '../../graphql/nexus';
import {GetStaticProps} from 'next';
import {ParsedUrlQuery} from 'querystring';
import {Station as StationType} from '@prisma/client';
import SearchBox from '../../components/search-box';
import PlayList from '../../components/play-list';
import StationPlayer from '../../components/station-player';
import Link from 'next/link';
import styles from '../../styles/station-page.module.css';

type Query = NexusGenFieldTypes['Query'];

const GET_STATION_LIST = gql`
  query Query {
    stations {
      id
      name
      meta {
        name
      }
    }
  }
`;

export default function Station({station}: {station: StationType}) {
  return (
    <>
      <Head>
        <title>Station - {station.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <p>
        <Link href="/">Back to Home</Link>
      </p>
      <h1>Station - {station.name}</h1>
      <section className={styles.section}>
        <StationPlayer stationId={station.id} />
      </section>
      <section className={styles.section}>
        <SearchBox stationId={station.id} />
      </section>
      <section className={styles.section}>
        <PlayList stationId={station.id} />
      </section>
    </>
  );
}

interface IParams extends ParsedUrlQuery {
  id: string;
}

export const getStaticProps: GetStaticProps = async (context) => {
  const {id} = context.params as IParams;
  const {error, data} = await client.query<Query>({query: GET_STATION_LIST});

  return {
    props: {
      station: data.stations.find((station) => station.id === id),
    },
  };
};

export async function getStaticPaths() {
  const {error, data} = await client.query<Query>({query: GET_STATION_LIST});
  const paths = data
    ? data.stations.map(({id}) => ({params: {id: id + ''}}))
    : [];
  return {
    paths,
    fallback: false,
  };
}
