import {useEffect, useState} from 'react';
import {useRouter} from 'next/router';
import Head from 'next/head';
import Image from 'next/image';
import {parse} from 'query-string';
import {gql, useQuery} from '@apollo/client';
import {add} from 'date-fns';

import useLocalStorage from '../hooks/use-local-storage';
import {spotifyLoginUrl} from '../auth/spotify';
import styles from '../styles/Home.module.css';
import SpotifyWebPlayer from 'react-spotify-web-playback';

export default function Home() {
  const router = useRouter();
  const [spotifyTokenExpiry, setSpotifyTokenExpiry] = useLocalStorage(
    'spotifyTokenExpiry',
    0,
  );
  const [spotifyToken, setSpotifyToken] = useLocalStorage('spotifyToken', '');
  const {data, loading, error} = useQuery(
    gql`
      {
        stations(id: "2") {
          id
          meta {
            name
          }
        }
        tracks(from: "2021-07-22T00:44:00Z", stationId: "2") {
          id
          name
          lengthInSeconds
          spotifyURI
          playAt
        }
      }
    `,
    {
      pollInterval: 10000,
    },
  );

  const [currentTrack, setCurrentTrack] = useState<any>({});

  useEffect(() => {
    if (router.asPath.includes('access_token')) {
      // Get the auth code from here
      const {access_token, expires_in} = parse(
        router.asPath.replace(/\//g, ''),
      );
      setSpotifyToken(access_token as string);
      setSpotifyTokenExpiry(Number(expires_in) * 1000 + Date.now());
      router.replace('/');
    }
  }, [router, setSpotifyToken, setSpotifyTokenExpiry]);

  useEffect(() => {
    if (!loading && data) {
      setCurrentTrack((prev: any) => {
        const now = new Date();
        if (prev) {
          const playAt = new Date(prev.playAt);
          const endAt = add(playAt, {
            seconds: prev.lengthInSeconds,
          });

          if (playAt <= now && now < endAt) {
            return prev;
          }
        }

        for (let i = data.tracks.length - 1; i >= 0; i--) {
          const track = data.tracks[i];
          const playAt = new Date(track.playAt);

          if (playAt < now) {
            return track;
          }
        }
      });
    }
  }, [data, loading]);

  if (error) {
    console.log(error);
  }

  console.log(currentTrack);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {spotifyTokenExpiry < Date.now() ? (
          <a className={styles.SignIn} href={spotifyLoginUrl}>
            Login to Spotify
          </a>
        ) : (
          <SpotifyWebPlayer
            token={spotifyToken}
            uris={currentTrack ? [currentTrack.spotifyURI] : []}
            initialVolume={0.5}
            autoPlay
          />
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
