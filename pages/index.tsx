import {useEffect, useCallback} from 'react';
import {useRouter} from 'next/router';
import Head from 'next/head';
import Image from 'next/image';
import {parse} from 'query-string';
import SpotifyWebApi, {Spotify} from 'spotify-web-api-js';

import useLocalStorage from '../hooks/use-local-storage';
import {spotifyLoginUrl} from '../auth/spotify';
import styles from '../styles/Home.module.css';
import {useQuery} from '@apollo/client';
import {gql} from 'apollo-server-micro';
import client from '../graphql/apollo-client';

export default function Home() {
  const router = useRouter();
  const [spotifyTokenExpiry, setSpotifyTokenExpiry] = useLocalStorage(
    'spotifyTokenExpiry',
    0,
  );
  const [spotifyToken, setSpotifyToken] = useLocalStorage('spotifyToken', '');

  useEffect(() => {
    if (router.asPath.includes('access_token')) {
      // Get the auth code from here
      const {access_token, expires_in} = parse(
        router.asPath.replace(/\//g, ''),
      );
      setSpotifyToken(access_token as string);
      setSpotifyTokenExpiry(Number(expires_in) * 1000 + Date.now());
      router.replace('/');
    }
  }, [router, setSpotifyToken, setSpotifyTokenExpiry]);

  const searchSpotify = useCallback(async () => {
    const searchText = document.getElementById('spotifySearchBox')?.value;
    const spotifyApi = new SpotifyWebApi();
    spotifyApi.setAccessToken(spotifyToken);
    const results = await spotifyApi.searchTracks(searchText, {limit: 5});

    const choiceList = document.getElementById('songChooser');
    if (choiceList === null) {
      return;
    }
    choiceList.innerHTML = '';
    for (let track of results.tracks.items) {
      const li = document.createElement('li');
      li.innerText = `${track.name} by ${track.artists[0].name}`;
      li.dataset.trackSpotifyURI = track.uri;
      li.dataset.trackLengthInSeconds = `${Math.floor(
        track.duration_ms / 1000,
      )}`;
      li.dataset.trackName = track.name;

      const APPEND_TRACK_MUTATION = gql`
        mutation AppendTrackToPlaylist(
          $stationId: ID!
          $name: String!
          $lengthInSeconds: Int!
          $spotifyURI: String!
        ) {
          createTrack(
            stationId: $stationId
            name: $name
            lengthInSeconds: $lengthInSeconds
            spotifyURI: $spotifyURI
          ) {
            name
            playAt
          }
        }
      `;
      li.onclick = async function () {
        console.log(this.dataset);
        const hasPermission = confirm(
          `Add track ${this.dataset.trackName} to the end of the playlist?`,
        );
        if (hasPermission) {
          const data = await client.mutate({
            mutation: APPEND_TRACK_MUTATION,
            variables: {
              stationId: '3',
              name: this.dataset.trackName,
              lengthInSeconds: parseInt(this.dataset.trackLengthInSeconds),
              spotifyURI: this.dataset.trackSpotifyURI,
            },
          });
          console.log(data);
        }
      };
      choiceList.appendChild(li);
    }
    console.log(results);
  }, [spotifyToken]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {spotifyTokenExpiry < Date.now() ? (
          <a className={styles.SignIn} href={spotifyLoginUrl}>
            Login to Spotify
          </a>
        ) : (
          <div>Logged in to Spotify âœ…</div>
        )}
        <input id="spotifySearchBox" />
        <input type="button" onClick={searchSpotify} value="Search" />
        <ul id="songChooser"></ul>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
