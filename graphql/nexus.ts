/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type {Context} from './context';
import type {core} from 'nexus';
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "DateTime";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenObjects {
  Mutation: {};
  Playback: {
    // root type
    timeElapsedInSeconds: number; // Int!
    track: NexusGenRootTypes['Track']; // Track!
  };
  Query: {};
  Station: {
    // root type
    id: string; // ID!
    name: string; // String!
  };
  StationMeta: {
    // root type
    name: string; // String!
  };
  Track: {
    // root type
    endAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    lengthInSeconds: number; // Int!
    name: string; // String!
    playAt: NexusGenScalars['DateTime']; // DateTime!
    spotifyURI?: string | null; // String
  };
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  Mutation: {
    // field return type
    createStation: NexusGenRootTypes['Station']; // Station!
    createTrack: NexusGenRootTypes['Track']; // Track!
  };
  Playback: {
    // field return type
    timeElapsedInSeconds: number; // Int!
    track: NexusGenRootTypes['Track']; // Track!
  };
  Query: {
    // field return type
    playback: NexusGenRootTypes['Playback'] | null; // Playback
    stations: NexusGenRootTypes['Station'][]; // [Station!]!
    tracks: NexusGenRootTypes['Track'][]; // [Track!]!
  };
  Station: {
    // field return type
    id: string; // ID!
    meta: NexusGenRootTypes['StationMeta']; // StationMeta!
    name: string; // String!
  };
  StationMeta: {
    // field return type
    name: string; // String!
  };
  Track: {
    // field return type
    endAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    lengthInSeconds: number; // Int!
    name: string; // String!
    playAt: NexusGenScalars['DateTime']; // DateTime!
    spotifyURI: string | null; // String
  };
}

export interface NexusGenFieldTypeNames {
  Mutation: {
    // field return type name
    createStation: 'Station';
    createTrack: 'Track';
  };
  Playback: {
    // field return type name
    timeElapsedInSeconds: 'Int';
    track: 'Track';
  };
  Query: {
    // field return type name
    playback: 'Playback';
    stations: 'Station';
    tracks: 'Track';
  };
  Station: {
    // field return type name
    id: 'ID';
    meta: 'StationMeta';
    name: 'String';
  };
  StationMeta: {
    // field return type name
    name: 'String';
  };
  Track: {
    // field return type name
    endAt: 'DateTime';
    id: 'ID';
    lengthInSeconds: 'Int';
    name: 'String';
    playAt: 'DateTime';
    spotifyURI: 'String';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    createStation: {
      // args
      name: string; // String!
    };
    createTrack: {
      // args
      lengthInSeconds: number; // Int!
      name: string; // String!
      spotifyURI?: string | null; // String
      stationId: string; // ID!
    };
  };
  Query: {
    playback: {
      // args
      stationId: string; // ID!
    };
    stations: {
      // args
      id?: string | null; // ID
    };
    tracks: {
      // args
      from: string; // String!
      stationId: string; // ID!
      to?: string | null; // String
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
